
#include <catch.h>
#include "../../src/types/packet.h"

using namespace starflow::types;

unsigned char buf1[] = { // EthII, IP4, TCP, 66 Bytes
	0x00, 0x26, 0x62, 0x2f, 0x47, 0x87, 0x00, 0x1d, 0x60, 0xb3, 0x01, 0x84, 0x08, 0x00, 0x45, 0x00,
	0x00, 0x34, 0x47, 0x6c, 0x40, 0x00, 0x40, 0x06, 0xad, 0x65, 0xc0, 0xa8, 0x01, 0x02, 0xae, 0x8f,
	0xd5, 0xb8, 0xd6, 0x39, 0x00, 0x50, 0xf6, 0x1c, 0x6f, 0x94, 0xfa, 0x58, 0xb8, 0xd1, 0x80, 0x10,
	0x00, 0x9f, 0x75, 0x78, 0x00, 0x00, 0x01, 0x01, 0x08, 0x0a, 0x00, 0x0d, 0x2b, 0xea, 0x12, 0xcc,
	0x8c, 0x8a
};

unsigned char buf2[] = { // EthII, IP4, TCP, HTTP, 791 Bytes
	0x00, 0x26, 0x62, 0x2f, 0x47, 0x87, 0x00, 0x1d, 0x60, 0xb3, 0x01, 0x84, 0x08, 0x00, 0x45, 0x00,
	0x03, 0x09, 0x47, 0x67, 0x40, 0x00, 0x40, 0x06, 0xaa, 0x95, 0xc0, 0xa8, 0x01, 0x02, 0xae, 0x8f,
	0xd5, 0xb8, 0xd6, 0x39, 0x00, 0x50, 0xf6, 0x1c, 0x6c, 0xbf, 0xfa, 0x58, 0x9c, 0x89, 0x80, 0x18,
	0x00, 0x2e, 0x48, 0xee, 0x00, 0x00, 0x01, 0x01, 0x08, 0x0a, 0x00, 0x0d, 0x2b, 0xe0, 0x12, 0xcc,
	0x8c, 0x71, 0x47, 0x45, 0x54, 0x20, 0x2f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x6c, 0x61,
	0x79, 0x6f, 0x75, 0x74, 0x2f, 0x6c, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x6e, 0x67, 0x20, 0x48, 0x54,
	0x54, 0x50, 0x2f, 0x31, 0x2e, 0x31, 0x0d, 0x0a, 0x48, 0x6f, 0x73, 0x74, 0x3a, 0x20, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x6c, 0x69, 0x66, 0x65, 0x2e, 0x6e, 0x65, 0x74, 0x0d, 0x0a, 0x55, 0x73,
	0x65, 0x72, 0x2d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x3a, 0x20, 0x4d, 0x6f, 0x7a, 0x69, 0x6c, 0x6c,
	0x61, 0x2f, 0x35, 0x2e, 0x30, 0x20, 0x28, 0x58, 0x31, 0x31, 0x3b, 0x20, 0x55, 0x3b, 0x20, 0x4c,
	0x69, 0x6e, 0x75, 0x78, 0x20, 0x78, 0x38, 0x36, 0x5f, 0x36, 0x34, 0x3b, 0x20, 0x65, 0x6e, 0x2d,
	0x55, 0x53, 0x3b, 0x20, 0x72, 0x76, 0x3a, 0x31, 0x2e, 0x39, 0x2e, 0x32, 0x2e, 0x33, 0x29, 0x20,
	0x47, 0x65, 0x63, 0x6b, 0x6f, 0x2f, 0x32, 0x30, 0x31, 0x30, 0x30, 0x34, 0x32, 0x33, 0x20, 0x55,
	0x62, 0x75, 0x6e, 0x74, 0x75, 0x2f, 0x31, 0x30, 0x2e, 0x30, 0x34, 0x20, 0x28, 0x6c, 0x75, 0x63,
	0x69, 0x64, 0x29, 0x20, 0x46, 0x69, 0x72, 0x65, 0x66, 0x6f, 0x78, 0x2f, 0x33, 0x2e, 0x36, 0x2e,
	0x33, 0x0d, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x3a, 0x20, 0x74, 0x65, 0x78, 0x74, 0x2f,
	0x68, 0x74, 0x6d, 0x6c, 0x2c, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x78, 0x68, 0x74, 0x6d, 0x6c, 0x2b, 0x78, 0x6d, 0x6c, 0x2c, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x78, 0x6d, 0x6c, 0x3b, 0x71, 0x3d, 0x30, 0x2e, 0x39,
	0x2c, 0x2a, 0x2f, 0x2a, 0x3b, 0x71, 0x3d, 0x30, 0x2e, 0x38, 0x0d, 0x0a, 0x41, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x2d, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x3a, 0x20, 0x65, 0x6e, 0x2d,
	0x75, 0x73, 0x2c, 0x65, 0x6e, 0x3b, 0x71, 0x3d, 0x30, 0x2e, 0x35, 0x0d, 0x0a, 0x41, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x2d, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x3a, 0x20, 0x67, 0x7a,
	0x69, 0x70, 0x2c, 0x64, 0x65, 0x66, 0x6c, 0x61, 0x74, 0x65, 0x0d, 0x0a, 0x41, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x2d, 0x43, 0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x3a, 0x20, 0x49, 0x53, 0x4f, 0x2d,
	0x38, 0x38, 0x35, 0x39, 0x2d, 0x31, 0x2c, 0x75, 0x74, 0x66, 0x2d, 0x38, 0x3b, 0x71, 0x3d, 0x30,
	0x2e, 0x37, 0x2c, 0x2a, 0x3b, 0x71, 0x3d, 0x30, 0x2e, 0x37, 0x0d, 0x0a, 0x4b, 0x65, 0x65, 0x70,
	0x2d, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x3a, 0x20, 0x31, 0x31, 0x35, 0x0d, 0x0a, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x20, 0x6b, 0x65, 0x65, 0x70, 0x2d, 0x61, 0x6c,
	0x69, 0x76, 0x65, 0x0d, 0x0a, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x3a, 0x20, 0x5f, 0x5f, 0x67,
	0x61, 0x64, 0x73, 0x3d, 0x49, 0x44, 0x3d, 0x62, 0x65, 0x36, 0x35, 0x31, 0x62, 0x65, 0x31, 0x39,
	0x38, 0x36, 0x61, 0x63, 0x32, 0x61, 0x37, 0x3a, 0x54, 0x3d, 0x31, 0x32, 0x36, 0x39, 0x34, 0x38,
	0x37, 0x38, 0x36, 0x32, 0x3a, 0x53, 0x3d, 0x41, 0x4c, 0x4e, 0x49, 0x5f, 0x4d, 0x5a, 0x64, 0x4b,
	0x6c, 0x5a, 0x5f, 0x58, 0x68, 0x4c, 0x4b, 0x56, 0x6a, 0x74, 0x38, 0x47, 0x4f, 0x7a, 0x72, 0x4d,
	0x54, 0x6c, 0x77, 0x45, 0x4b, 0x4f, 0x75, 0x41, 0x51, 0x3b, 0x20, 0x5f, 0x5f, 0x75, 0x74, 0x6d,
	0x61, 0x3d, 0x31, 0x31, 0x36, 0x38, 0x37, 0x38, 0x33, 0x34, 0x33, 0x2e, 0x34, 0x33, 0x38, 0x34,
	0x37, 0x32, 0x35, 0x31, 0x38, 0x2e, 0x31, 0x32, 0x36, 0x39, 0x34, 0x38, 0x37, 0x38, 0x35, 0x37,
	0x2e, 0x31, 0x32, 0x37, 0x35, 0x36, 0x36, 0x39, 0x35, 0x34, 0x33, 0x2e, 0x31, 0x32, 0x37, 0x35,
	0x36, 0x37, 0x33, 0x34, 0x34, 0x30, 0x2e, 0x32, 0x35, 0x39, 0x3b, 0x20, 0x5f, 0x5f, 0x75, 0x74,
	0x6d, 0x7a, 0x3d, 0x31, 0x31, 0x36, 0x38, 0x37, 0x38, 0x33, 0x34, 0x33, 0x2e, 0x31, 0x32, 0x37,
	0x35, 0x35, 0x30, 0x33, 0x36, 0x36, 0x32, 0x2e, 0x32, 0x35, 0x31, 0x2e, 0x32, 0x36, 0x2e, 0x75,
	0x74, 0x6d, 0x63, 0x73, 0x72, 0x3d, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x7c, 0x75, 0x74, 0x6d,
	0x63, 0x63, 0x6e, 0x3d, 0x28, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x63, 0x29, 0x7c, 0x75, 0x74,
	0x6d, 0x63, 0x6d, 0x64, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x63, 0x7c, 0x75, 0x74, 0x6d,
	0x63, 0x74, 0x72, 0x3d, 0x70, 0x61, 0x74, 0x68, 0x25, 0x32, 0x30, 0x6d, 0x74, 0x75, 0x25, 0x32,
	0x30, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x25, 0x32, 0x30, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x6c, 0x69, 0x66, 0x65, 0x3b, 0x20, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x69, 0x64, 0x3d, 0x63, 0x39, 0x66, 0x31, 0x33, 0x37, 0x62, 0x38, 0x66, 0x66, 0x66, 0x30, 0x36,
	0x33, 0x39, 0x34, 0x30, 0x34, 0x63, 0x39, 0x34, 0x64, 0x35, 0x35, 0x30, 0x33, 0x32, 0x63, 0x61,
	0x38, 0x35, 0x65, 0x0d, 0x0a, 0x0d, 0x0a
};

TEST_CASE("Packet","[types::Packet]")
{
	Packet p1(123, 124, 23);
	Packet p2(495, 496, 3439);
	Packet p3(123, 124, 23);

	p1.qid = 1;
	p1.qlen = 21;
	p1.features = Features { };

	p2.qid = 2;
	p2.qlen = 22;
	p2.features = Features { };

	p3.qid = 1;
	p3.qlen = 21;
	p3.features = Features { };

	SECTION("Packet(ts_in, ts_out, len)")
	{
		CHECK(p1.ts_in_us == 123);
		CHECK(p1.ts_out_us == 124);
		CHECK(p1.len == 23);
		CHECK(p2.ts_in_us == 495);
		CHECK(p2.ts_out_us == 496);
		CHECK(p2.len == 3439);
	}

	SECTION("operator==")
	{
		CHECK(p1 == p3);
		CHECK(p2 != p1);
		CHECK(p2 != p3);
	}

	SECTION("Packet(proto), to_proto()")
	{
		starflow::proto::packet proto_packet = p1.to_proto();
		Packet packet_restore(proto_packet);
		CHECK(p1 == packet_restore);
	}

	SECTION("Packet::parse: case 1") {

		Key k4;
		Packet p4(34833, 34836, 66);
		CHECK(Packet::parse(buf1, 66, k4, p4));

		CHECK(k4.ip_proto == 0x06);
		CHECK(k4.ip_src   == htonl(0xc0a80102));
		CHECK(k4.ip_dst   == htonl(0xae8fd5b8));
		CHECK(k4.th_dport == 80);
		CHECK(k4.th_sport == 54841);

		CHECK(p4.features.tcp_flags.is_ack());
		CHECK_FALSE(p4.features.tcp_flags.is_fin());
		CHECK_FALSE(p4.features.tcp_flags.is_syn());
		CHECK_FALSE(p4.features.tcp_flags.is_urg());
		CHECK_FALSE(p4.features.tcp_flags.is_psh());
		CHECK_FALSE(p4.features.tcp_flags.is_rst());
		CHECK(p4.features.tcp_seq == 0xf61c6f94);
		CHECK(p4.features.tcp_seq == 4129058708);
		CHECK(p4.features.tcp_pl_len == 0);
	}

	SECTION("Packet::parse: case 2") {

		Key k5;
		Packet p5(34833, 34836, 791);
		CHECK(Packet::parse(buf2, 791, k5, p5));

		CHECK(k5.ip_proto == 0x06);
		CHECK(k5.ip_src   == htonl(0xc0a80102));
		CHECK(k5.ip_dst   == htonl(0xae8fd5b8));
		CHECK(k5.th_dport == 80);
		CHECK(k5.th_sport == 54841);

		CHECK(p5.features.tcp_flags.is_ack());
		CHECK(p5.features.tcp_flags.is_psh());
		CHECK_FALSE(p5.features.tcp_flags.is_fin());
		CHECK_FALSE(p5.features.tcp_flags.is_syn());
		CHECK_FALSE(p5.features.tcp_flags.is_urg());
		CHECK_FALSE(p5.features.tcp_flags.is_rst());
		CHECK(p5.features.tcp_seq    == 0xf61c6cbf);
		CHECK(p5.features.tcp_seq    == 4129057983);
		CHECK(p5.features.tcp_pl_len == 725);
	}
}
